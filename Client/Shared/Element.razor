@using Helpers
@using Shared.ContextMenu
@using BlazorElectronToolbar.Shared
@inject IToolbarCommandControl ToolbarCommandControl
@inject ToolbarExpandNotifier ExpandNotifier

<div class="element" @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true" @oncontextmenu:stopPropagation="true">
    <Tooltip>@File.Name</Tooltip>
    <button type="button" @onclick="Run">
        <img src="/img/@ActiveIcon?r=@(new Random(1).Next(100,50000))" alt="@File.Name icon" />
        <p>@File.Name</p>
    </button>
</div>

@code {
    [Parameter] public EventCallback<CMEventArgs> OnContextMenu { get; set; }
    [Parameter] public FileDescriptor File { get; set; }

    string FileIconPath = "app-default.png"; //Default icon in case we couldn't fetch the app icon.
    string FolderIconPath = "folder-default.png"; //Default icon for folders.
    string ActiveIcon;

    bool FileIconCreated = false;

    protected override void OnInitialized()
    {
        ActiveIcon = File.IsFolder ? FolderIconPath : FileIconPath;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !FileIconCreated)
        {
            await CreateIcon();
        }
    }

    async Task OnRightClick(MouseEventArgs e)
    {
        await OnContextMenu.InvokeAsync(new CMEventArgs { MouseEventArgs = e, ItemId = File.FileId });
    }

    async Task CreateIcon()
    {
        if (!File.IsFolder)
        {
            var res = await ToolbarCommandControl.CreateFileIcon(File.FileId, File.Path);

            if (res)
            {
                ActiveIcon = File.FileId + ".png";
                FileIconCreated = true;
                StateHasChanged();
            }
        }
    }

    async Task Run()
    {
        var res = await ToolbarCommandControl.Run(File.Path);

        if (!res) //Make an error dialog instead
        {
            throw new Exception($"App {File.Name} failed to start!");
        }
    }
}