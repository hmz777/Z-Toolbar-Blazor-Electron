@using Helpers
@using Shared.ContextMenu
@using BlazorElectronToolbar.Shared
@inject IToolbarCommandControl ToolbarCommandControl
@inject ToolbarExpandNotifier ExpandNotifier

<div class="element" @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true" @oncontextmenu:stopPropagation="true">
    <Tooltip>@File.Name</Tooltip>
    <button type="button" @onclick="Run">
        <img src="/img/@(string.IsNullOrEmpty(ActiveIcon) ? FileIconPath : ActiveIcon)?r=@(new Random(1).Next(100,50000))" alt="@File.Name icon" />
        <p>@File.Name</p>
    </button>
    <Checkbox @ref="Checkbox" Visible="CheckedMode" ElementCheckboxCallback="OnCheckboxChecked"></Checkbox>
</div>

@code {
    /// <summary>
    /// A callback to show the context menu on this element
    /// </summary>
    [Parameter] public EventCallback<CMEventArgs> OnContextMenu { get; set; }
    [Parameter] public FileDescriptor File { get; set; }

    /// <summary>
    /// A flag to show the checkboxes when holding the Ctrl key in the Index page
    /// </summary>
    [Parameter] public bool CheckedMode { get; set; }

    /// <summary>
    /// A callback for the Index page that will be invoked on the checkbox check
    /// </summary>
    [Parameter] public EventCallback<CMEventArgs> CheckBoxCallback { get; set; }

    Checkbox Checkbox;

    string FileIconPath = "app-default.png"; //Default icon in case we couldn't fetch the app icon
    string FolderIconPath = "folder-default.png"; //Default icon for folders
    string ActiveIcon; //Chosen icon

    bool IsFolder;
    bool IconCreated;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"Element {File.Name} after render, active icon {ActiveIcon}");
        if (firstRender && !IconCreated)
        {
            //Console.WriteLine($"Element {File.Name} after render, first render, active icon {ActiveIcon}");
            IsFolder = await ToolbarCommandControl.DirectoryOrFile(File.Path);
            await CreateIcon();
            //Console.WriteLine($"Element {File.Name} after render, first render, icon created {IconCreated}, active icon {ActiveIcon}");
        }
    }

    /// <summary>
    /// Invokes the Index page callback to activate the context menu on this element
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task OnRightClick(MouseEventArgs e)
    {
        await OnContextMenu.InvokeAsync(new CMEventArgs { MouseEventArgs = e, ItemId = File.FileId, Checked = Checkbox.CheckState });
    }

    /// <summary>
    /// A method that is invoked when the child checkbox is checked that passes the event to the Index page
    /// </summary>
    /// <param name="CheckState"></param>
    /// <returns></returns>
    async Task OnCheckboxChecked(bool CheckState)
    {
        await CheckBoxCallback.InvokeAsync(new CMEventArgs { Checked = CheckState, ItemId = File.FileId });
    }

    /// <summary>
    /// Check the child checkbox from parent by reference
    /// </summary>
    public void CheckCheckbox()
    {
        Checkbox.Check();
    }

    /// <summary>
    /// Clear the child checkbox from parent by reference
    /// </summary>
    public void ClearCheckBox()
    {
        Checkbox.Clear();
    }

    /// <summary>
    /// Request the server to extract the icon from file if it doesn't exist
    /// </summary>
    /// <returns></returns>
    async Task CreateIcon()
    {
        if (!IsFolder)
        {
            var res = await ToolbarCommandControl.CreateFileIcon(File.FileId, File.Path);

            if (res)
            {
                ActiveIcon = File.FileId + ".png";
            }
        }
        else
        {
            ActiveIcon = FolderIconPath;
        }

        IconCreated = true;
        StateHasChanged();
    }

    /// <summary>
    /// A handler to run the file on click
    /// </summary>
    /// <returns></returns>
    async Task Run()
    {
        var res = await ToolbarCommandControl.Run(File.Path);

        if (!res) //Make an error dialog instead
        {
            throw new Exception($"App {File.Name} failed to start!");
        }
    }
}