@using Helpers
@using Shared.ContextMenu
@inject IToolbarCommandControl ToolbarCommandControl
@inject ToolbarExpandNotifier ExpandNotifier

<div class="element" @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true" @oncontextmenu:stopPropagation="true">
    <Tooltip>@Name</Tooltip>
    <button type="button" @onclick="Run">
        <img src="/img/@IconPath?@(new Random(1).Next(100,50000))" alt="@Name icon" />
        <p>@Name</p>
    </button>
</div>

@code {
    [Parameter] public EventCallback<CMEventArgs> OnContextMenu { get; set; }
    [Parameter] public string ItemId { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public string Path { get; set; }

    string IconPath = "app-default.png"; //Default icon in case we couldn't fetch the app icon.
    bool IconCreated = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IconCreated)
        {
            await CreateIcon();
        }
    }

    async Task OnRightClick(MouseEventArgs e)
    {
        await OnContextMenu.InvokeAsync(new CMEventArgs { MouseEventArgs = e, ItemId = ItemId });
    }

    async Task CreateIcon()
    {
        var res = await ToolbarCommandControl.CreateFileIcon(ItemId, Path);

        if (res)
        {
            IconPath = ItemId + ".png";
            IconCreated = true;
            StateHasChanged();
        }
    }

    async Task Run()
    {
        var res = await ToolbarCommandControl.Run(Path);

        if (!res) //Make an error dialog instead
        {
            throw new Exception($"App {Name} failed to start!");
        }
    }
}