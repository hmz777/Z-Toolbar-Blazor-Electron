@using Helpers
@inherits LayoutComponentBase
@implements IDisposable
@inject IToolbarCommandControl TCC
@inject ToolbarExpandNotifier TEN
@inject IJSRuntime JSRuntime

<CascadingValue Value="@AccentColor">
    <div class="main @(AppVisible ? "slideIn": "") @(IsToolbarExpanded ? "expand": "")" style="--cm-button-hover-color:@AccentColor" id="main" role="main">
        @Body
    </div>
</CascadingValue>

@code {
    bool IsToolbarExpanded = false;
    bool AppVisible = true;
    string AccentColor = "#ff8c00";

    protected override async Task OnInitializedAsync()
    {
        TEN.OnExpandToggle += ToggleExpand;
        await JSRuntime.InvokeVoidAsync("ZHelpers.HookBlazorToCommandChannel", DotNetObjectReference.Create(this));
        AccentColor = (await TCC.GetWindowsAccentColor())?.ToString() ?? AccentColor;
    }

    void ToggleExpand(bool expand)
    {
        IsToolbarExpanded = expand;
        StateHasChanged();
    }

    [JSInvokable]
    public void ToggleVisibility(bool state)
    {
        AppVisible = state;
        StateHasChanged();
    }

    public void Dispose()
    {
        TEN.OnExpandToggle -= ToggleExpand;
    }
}