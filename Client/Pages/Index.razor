@using BlazorElectronToolbar.Client.Shared.ContextMenu
@using Helpers
@using BlazorElectronToolbar.Shared
@using System.Text.Json;
@inject IJSRuntime JsRuntime
@inject IToolbarCommandControl ToolbarCommandControl
@page "/"

@if (Expanded)
{
    <div class="side-content" id="side-content">
        <button type="button" @onclick="HideInfo" title="Close" class="close-btn"><i class="las la-times-circle la-2x"></i></button>
        <div class="side-content--outer">
            <div class="side-content--inner">
                @if (!IsAboutDialog)
                {
                    if (MultiInfo)
                    {
                        @foreach (var requestedFile in RequestedFilesForInfo)
                        {
                            <ElementInfo File="requestedFile" />
                        }
                    }
                    else if (SingleInfo)
                    {
                        <ElementInfo File="RequestedFileForInfo" />
                    }
                }
                else
                {
                    <AboutSection AboutModel="AboutModel" />
                }
            </div>
        </div>
    </div>
}
<div tabindex="0" class="main-content" id="main-content" @oncontextmenu="OnMainRightClick" @onkeydown="SelectionHandlerDown" @onkeyup="SelectionHandlerUp">
    <ElementContainer>
        <div class="content">
            @if (Files.Count > 0)
            {
                @foreach (var File in Files)
                {
                    <Element @key="File" @ref="Element" OnContextMenu="ToggleContextMenu" File="File" CheckedMode="CheckMode" CheckBoxCallback="ItemMultiselectHandler" />
                }
            }
            else
            {
                <p class="placeholder-text"><i class="las la-info-circle la-2x"></i> Drag and drop files or folders here.</p>
            }
        </div>
    </ElementContainer>
</div>

<ContextMenu @ref="ContextMenu" MenuId="menu-1">
    @if (ActiveItemIds.Count > 0 && string.IsNullOrEmpty(ActiveItemId))
    {
        if (ActiveItemIds.Count == 1)
        {
            <CMItem OnClick="Run">Run</CMItem>
        }
        <CMItem OnClick="ShowInfo">Show info</CMItem>
        <CMItem OnClick="Remove">Remove</CMItem>
    }
    else if (!string.IsNullOrEmpty(ActiveItemId) && ActiveItemIds.Count == 0)
    {
        <CMItem OnClick="Run">Run</CMItem>
        <CMItem OnClick="ShowInfo">Show info</CMItem>
        <CMItem OnClick="ShowInExplorer">Show in explorer</CMItem>
        <CMItem OnClick="Remove">Remove</CMItem>
    }
    else
    {
        <CMItem OnClick="ToolbarCommandControl.OpenDevTools">Open DevTools</CMItem>
        <CMItem OnClick="About">About</CMItem>
        <CMItem OnClick="ToolbarCommandControl.ExitApp">Exit</CMItem>
    }
</ContextMenu>

@code {
    #region Context Menu

    IJSObjectReference ContextMenuModule;
    ContextMenu ContextMenu;

    #endregion

    #region File Info

    bool Expanded = false;
    bool MultiInfo = false;
    bool SingleInfo = false;
    HashSet<FileDescriptor> RequestedFilesForInfo = new HashSet<FileDescriptor>();
    FileDescriptor RequestedFileForInfo;

    #endregion

    #region File List and Its Component List

    HashSet<FileDescriptor> Files = new HashSet<FileDescriptor>();
    Element Element
    {
        set
        {
            if (!Elements.Any(f => f.File == value.File))
            {
                Elements.Add(value);
            }
        }
    }
    HashSet<Element> Elements = new HashSet<Element>();
    int CurrentCount = 0;

    #endregion

    #region Active Item(s) Members

    HashSet<string> ActiveItemIds = new HashSet<string>();
    string ActiveItemId;

    #endregion

    #region Item Checking

    bool CheckMode = false;

    #endregion

    #region About Dialog

    bool IsAboutDialog = false;
    AboutModel AboutModel;

    #endregion

    #region Component Event Handlers

    protected async override Task OnInitializedAsync()
    {
        Files = (await ToolbarCommandControl.LoadFiles())?.ToHashSet() ?? new HashSet<FileDescriptor>();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ContextMenuModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modules/contextmenu.js");
            await ContextMenuModule.InvokeVoidAsync("InitCM", DotNetObjectReference.Create(ContextMenu));
            await JsRuntime.InvokeVoidAsync("ZHelpers.AttachItemDropEvent", DotNetObjectReference.Create(this));
        }

        if (Expanded)
        {
            await JsRuntime.InvokeVoidAsync("ZHelpers.InitElementContainerScrollbars", ".side-content--outer");
        }
    }

    #endregion

    #region Context Menu Handlers

    void OnMainRightClick(MouseEventArgs e)
    {
        ClearAllChecks();

        StateHasChanged();
        ContextMenu.UpdatePosition(e.ClientX, e.ClientY);
        ContextMenu.Show();
    }

    void ToggleContextMenu(CMEventArgs e)
    {
        ActiveItemId = ActiveItemIds.Count > 0 ? null : e.ItemId;
        StateHasChanged();
        ContextMenu.UpdatePosition(e.MouseEventArgs.ClientX, e.MouseEventArgs.ClientY);
        ContextMenu.Show();
    }

    #endregion

    #region Item Checking Logic

    void SelectionHandlerDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey)
        {
            CheckMode = true;

            if (e.Code == "KeyA")
            {
                CheckAll();
            }

            StateHasChanged();
        }
    }

    async Task SelectionHandlerUp(KeyboardEventArgs e)
    {
        if (CheckMode)
        {
            CheckMode = false;
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("ZHelpers.FocusElement", "#main-content");
        }
    }

    void ItemMultiselectHandler(CMEventArgs e)
    {
        if (e.Checked)
        {
            ActiveItemIds.Add(e.ItemId);
        }
        else
        {
            ActiveItemIds.Remove(e.ItemId);
        }
    }

    async void CheckAll()
    {
        if (Elements.Count > 0)
        {
            foreach (var element in Elements)
            {
                await element?.CheckCheckbox();
            }
        }
    }

    void ClearAllChecks()
    {
        if (Elements.Count > 0)
        {
            foreach (var element in Elements)
            {
                element?.ClearCheckBox();
            }
        }

        ActiveItemIds.Clear();
        ActiveItemId = null;
    }

    #endregion

    #region Item Add/Remove Logic

    [JSInvokable]
    public async void ItemDropHandler(string JsonData)
    {
        var newFiles = JsonSerializer.Deserialize<FileDescriptor[]>(JsonData);

        for (int i = 0; i < newFiles.Length; i++)
        {
            if (!Files.Any(f => f.Name.Equals(newFiles[i].Name, StringComparison.InvariantCultureIgnoreCase)))
            {
                string fileId;

                do
                {
                    fileId = Guid.NewGuid().ToString();

                } while (Files.Any(f => f.FileId.Equals(fileId, StringComparison.InvariantCultureIgnoreCase)));

                newFiles[i].FileId = fileId;

                Files.Add(newFiles[i]);
            }
        }

        if (Files.Count != CurrentCount)
        {
            await ToolbarCommandControl.SaveChanges(Files);
            CurrentCount = Files.Count;
            StateHasChanged();
        }

        ClearAllChecks();
    }

    async Task Remove()
    {
        FileDescriptor FileToRemove = null;
        List<FileDescriptor> FilesToRemove = null;
        Element ElementToRemove = null;
        List<Element> ElementsToRemove = null;

        if (ActiveItemIds.Count > 0)
        {
            Console.WriteLine("Active item ids are on!");
            FilesToRemove = Files.Where(f => ActiveItemIds.Contains(f.FileId)).ToList();
            ElementsToRemove = Elements.Where(e => ActiveItemIds.Contains(e.File.FileId)).ToList();

            if (FilesToRemove?.Count > 0)
            {
                foreach (var file in FilesToRemove)
                {
                    Files.Remove(file);
                    await ToolbarCommandControl.Remove(file.FileId);
                }

                foreach (var element in ElementsToRemove)
                {
                    Elements.Remove(element);
                }

                await ToolbarCommandControl.SaveChanges(Files);
                CurrentCount = Files.Count;
                ClearAllChecks();
                StateHasChanged();
            }
        }
        else if (!string.IsNullOrEmpty(ActiveItemId))
        {
            Console.WriteLine("Single active item is on!");
            FileToRemove = Files.Where(f => f.FileId.Equals(ActiveItemId, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
            ElementToRemove = Elements.Where(e => e.File.FileId.Equals(ActiveItemId, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();

            if (FileToRemove != null)
            {
                Files.Remove(FileToRemove);
                await ToolbarCommandControl.Remove(FileToRemove.FileId);

                Elements.Remove(ElementToRemove);

                await ToolbarCommandControl.SaveChanges(Files);
                CurrentCount = Files.Count;
                ClearAllChecks();
                StateHasChanged();
            }
        }
    }

    #endregion

    #region User Actions

    async Task Run()
    {
        FileDescriptor File = null;

        if (ActiveItemIds.Count > 0)
        {
            File = Files.Where(f => f.FileId == ActiveItemIds.First()).FirstOrDefault();
        }
        else if (!string.IsNullOrEmpty(ActiveItemId))
        {
            File = Files.Where(f => f.FileId == ActiveItemId).FirstOrDefault();
        }

        if (File != null)
        {
            await ToolbarCommandControl.Run(File.Path);
        }
    }

    async Task ShowInExplorer()
    {
        FileDescriptor File = null;

        if (!string.IsNullOrEmpty(ActiveItemId))
        {
            File = Files.Where(f => f.FileId == ActiveItemId).FirstOrDefault();
        }

        if (File != null)
        {
            await ToolbarCommandControl.ShowInExplorer(File.Path);
        }
    }

    async Task ShowInfo()
    {
        IsAboutDialog = false;

        if (ActiveItemIds.Count > 0 && string.IsNullOrEmpty(ActiveItemId))
        {
            MultiInfo = true;
            SingleInfo = false;
            RequestedFilesForInfo = Files.Where(f => ActiveItemIds.Contains(f.FileId)).ToHashSet();
        }
        else if (!string.IsNullOrEmpty(ActiveItemId) && ActiveItemIds.Count == 0)
        {
            SingleInfo = true;
            MultiInfo = false;
            RequestedFileForInfo = Files.Where(f => f.FileId.Equals(ActiveItemId, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
        }

        await ToolbarCommandControl.Expand();
        if (!Expanded)
        {
            await Task.Delay(200);
        }

        Expanded = true;
        StateHasChanged();
    }

    async Task HideInfo()
    {
        Expanded = false;
        IsAboutDialog = false;
        MultiInfo = false;
        SingleInfo = false;
        StateHasChanged();
        await ToolbarCommandControl.Retract();
    }

    #endregion

    #region About Logic

    async Task About()
    {
        var aboutData = await ToolbarCommandControl.AboutDialog();

        if (aboutData != null)
        {
            AboutModel = aboutData;
            IsAboutDialog = true;
            MultiInfo = false;
            SingleInfo = false;

            await ToolbarCommandControl.Expand();
            if (!Expanded)
            {
                await Task.Delay(200);
            }

            Expanded = true;
            StateHasChanged();
        }
    }

    #endregion
}