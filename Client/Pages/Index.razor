@using BlazorElectronToolbar.Client.Shared.ContextMenu
@using Helpers
@using BlazorElectronToolbar.Shared
@using System.Text.Json;
@inject IJSRuntime JsRuntime
@inject IToolbarCommandControl ToolbarCommandControl
@page "/"

<div class="main-content" id="main-content">
    <ElementContainer>
        <div class="content">
            @if (Files.Count > 0)
            {
                foreach (var File in Files)
                {
                    <Element OnContextMenu="ToggleContextMenu" ItemId="@File.FileId" Name="@File.Name" Path="@File.Path"></Element>
                }
            }
        </div>
    </ElementContainer>
</div>

<ContextMenu @ref="ContextMenu" MenuId="menu-1">
    <CMItem OnClick="Run">Run</CMItem>
    <CMItem OnClick="ShowInfo">Show info</CMItem>
    <CMItem OnClick="Remove">Remove</CMItem>
    <CMItem OnClick="ToolbarCommandControl.OpenDevTools">Open dev tools</CMItem>
    <CMItem OnClick="ToolbarCommandControl.AboutDialog">About the developer</CMItem>
</ContextMenu>

@code {

    IJSObjectReference ContextMenuModule;
    ContextMenu ContextMenu;
    List<FileDescriptor> Files = new List<FileDescriptor>();
    int CurrentCount = 0;

    string ActiveItemId = null;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ContextMenuModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modules/contextmenu.js");
            await ContextMenuModule.InvokeVoidAsync("InitCM", DotNetObjectReference.Create(ContextMenu));
            await JsRuntime.InvokeVoidAsync("ZHelpers.AttachItemDropEvent", DotNetObjectReference.Create(this));
        }
    }

    void ToggleContextMenu(CMEventArgs e)
    {
        ActiveItemId = e.ItemId;
        ContextMenu.UpdatePosition(e.MouseEventArgs.ClientX, e.MouseEventArgs.ClientY);
        ContextMenu.Show();
    }

    [JSInvokable]
    public void ItemDropHandler(string JsonData)
    {
        var newFiles = JsonSerializer.Deserialize<FileDescriptor[]>(JsonData);

        for (int i = 0; i < newFiles.Length; i++)
        {
            if (!Files.Any(f => f.Name.Equals(newFiles[i].Name, StringComparison.InvariantCultureIgnoreCase)))
            {
                newFiles[i].FileId = Guid.NewGuid().ToString();
                Files.Add(newFiles[i]);
            }
        }

        //Save changes to disk

        if (Files.Count != CurrentCount)
        {
            CurrentCount = Files.Count;
            StateHasChanged();
        }
    }

    async Task Run()
    {
        var File = Files.Where(f => f.FileId == ActiveItemId).FirstOrDefault();

        if (File != null)
        {
            var res = await ToolbarCommandControl.Run(File.Path);

            if (!res) //Make an error dialog instead
            {
                throw new Exception($"App {File.Name} failed to start!");
            }
        }
    }

    void ShowInfo()
    {
        Console.WriteLine("Test!");
    }

    async Task Remove()
    {
        var item = Files.Where(f => f.FileId.Equals(ActiveItemId, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();

        if (item != null)
        {
            Files.Remove(item);
            await ToolbarCommandControl.Remove(ActiveItemId);
        }

        //Save changes to disk
    }
}
